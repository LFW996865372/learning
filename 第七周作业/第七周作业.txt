1、使用ProcessOn绘制SpringDI容器初始化过程的时序图
https://www.processon.com/diagraming/5fa018525653bb0add896cf8

2、整理笔记，完全理解SpringDI容器的核心原理和设计模式的应用场景。
1、依赖注入发生的时间，是在IOC容器完成Bean定义资源的定位、加载、注册，IOC容器已管理Bean定义的相关数据之后。
但此时IOC容器还未对所管理的bean进行依赖注入，依赖注入在以下两种情况发生：
1）、用户第一次调用getBean()方法时，IOC容器触发依赖注入。
2）、当用户在配置文件中将<bean>元素配置了lazy-init=false属性，即让容器在解析注册Bean定义时进行预实例化，触发依赖注入。
2、依赖注入的执行流程：
1）、寻找获取Bean的入口
BeanFactory.getBean(),BeanFactory接口定义了SpringIOC容器的基本功能规范,getBean()方法，就是用户向IOC容器索取管理的Bean的方法
AbstractBeanFactory.getBean(),定义了根据Bean定义的模式，采取的不同创建Bean实例对象的策略
ObjectFactory.createBean(),ObjectFactory使用委派模式，具体的Bean实例创建过程交由其实现类AbstractAutowireCapableBeanFactory完成
2）、开始实例化
AbstractAutowireCapableBeanFactory.createBean(),实现了ObjectFactory接口，创建容器指定的Bean实例对象，同时还对创建的Bean实例对象进行初始化处理
3）、选择Bean实例化策略
AbstractAutowireCapableBeanFactory.createBeanInstance(),根据指定的初始化策略，使用简单工厂、工厂方法或者容器的自动装配特性生成Java实例对象
	对使用工厂方法和自动装配特性的Bean的实例化,调用相应的工厂方法或者参数匹配的构造方法即可完成实例化对象的工作，
	对于我们最常使用的默认无参构造方法就需要使用相应的初始化策略(JDK的反射机制或者CGLib)来进行初始化
4）、执行Bean实例化
SimpleInstantiationStrategy.instantiate(),
在使用默认的无参构造方法创建Bean的实例化对象时，方法AbstractAutowireCapableBeanFactory.getInstantiationStrategy().instantiate()调用了SimpleInstantiationStrategy类中的实例化Bean的方法。典型的策略模式
5）、准备依赖注入
AbstractAutowireCapableBeanFactory.populateBean()方法，对Bean属性的依赖注入进行处理。
AbstractAutowireCapableBeanFactory.applyPropertyValues(),解析并注入依赖属性的过程。
6）、解析属性注入规则
BeanDefinitionValueResolver类中的resolveValueIfNecessary()，对属性值解析
7）、注入赋值
BeanWrapper.setPropertyValues(),定义了依赖注入的方法声明，该方法也使用了委托模式。
BeanWrapperImpl.setPropertyValues()，类主要是对容器中完成初始化的Bean实例对象进行属性的依赖注入，即把Bean对象设置到它所依赖的另一个Bean的属性中去。
然而，BeanWrapperImpl中的注入方法实际上由AbstractNestablePropertyAccessor来实现的