20201027
1、使用ProcessOn绘制SpringDI容器初始化过程的时序图
https://www.processon.com/diagraming/5fa018525653bb0add896cf8

2、整理笔记，完全理解SpringDI容器的核心原理和设计模式的应用场景。
1、依赖注入发生的时间，是在IOC容器完成Bean定义资源的定位、加载、注册，IOC容器已管理Bean定义的相关数据之后。
但此时IOC容器还未对所管理的bean进行依赖注入，依赖注入在以下两种情况发生：
1）、用户第一次调用getBean()方法时，IOC容器触发依赖注入。
2）、当用户在配置文件中将<bean>元素配置了lazy-init=false属性，即让容器在解析注册Bean定义时进行预实例化，触发依赖注入。
2、依赖注入的执行流程：
1）、寻找获取Bean的入口
BeanFactory.getBean(),BeanFactory接口定义了SpringIOC容器的基本功能规范,getBean()方法，就是用户向IOC容器索取管理的Bean的方法
AbstractBeanFactory.getBean(),定义了根据Bean定义的模式，采取的不同创建Bean实例对象的策略
ObjectFactory.createBean(),ObjectFactory使用委派模式，具体的Bean实例创建过程交由其实现类AbstractAutowireCapableBeanFactory完成
2）、开始实例化
AbstractAutowireCapableBeanFactory.createBean(),实现了ObjectFactory接口，创建容器指定的Bean实例对象，同时还对创建的Bean实例对象进行初始化处理
3）、选择Bean实例化策略
AbstractAutowireCapableBeanFactory.createBeanInstance(),根据指定的初始化策略，使用简单工厂、工厂方法或者容器的自动装配特性生成Java实例对象
	对使用工厂方法和自动装配特性的Bean的实例化,调用相应的工厂方法或者参数匹配的构造方法即可完成实例化对象的工作，
	对于我们最常使用的默认无参构造方法就需要使用相应的初始化策略(JDK的反射机制或者CGLib)来进行初始化
4）、执行Bean实例化
SimpleInstantiationStrategy.instantiate(),
在使用默认的无参构造方法创建Bean的实例化对象时，方法AbstractAutowireCapableBeanFactory.getInstantiationStrategy().instantiate()调用了SimpleInstantiationStrategy类中的实例化Bean的方法。典型的策略模式
5）、准备依赖注入
AbstractAutowireCapableBeanFactory.populateBean()方法，对Bean属性的依赖注入进行处理。
AbstractAutowireCapableBeanFactory.applyPropertyValues(),解析并注入依赖属性的过程。
6）、解析属性注入规则
BeanDefinitionValueResolver类中的resolveValueIfNecessary()，对属性值解析
7）、注入赋值
BeanWrapper.setPropertyValues(),定义了依赖注入的方法声明，该方法也使用了委托模式。
BeanWrapperImpl.setPropertyValues()，类主要是对容器中完成初始化的Bean实例对象进行属性的依赖注入，即把Bean对象设置到它所依赖的另一个Bean的属性中去。
然而，BeanWrapperImpl中的注入方法实际上由AbstractNestablePropertyAccessor来实现的

20201029
1、使用ProcessOn绘制SpringAOP容器初始化过程的时序图
https://www.processon.com/diagraming/5fa16d967d9c081baf120ec6
2、整理笔记，完全理解SpringAOP容器的核心原理和设计模式的应用场景。
AOP是OOP的延续，意思是面向切面编程。
可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。
AOP追求的是实现调用者和被调用者之间的解耦。
AOP相关概念：
1）切面( Aspect)
一个关注点的模块化，这个关注点可能会横切多个对象。面向规则，具有相同规则的方法的集合体。
2）、连接点（Joinpoint）：
程序执行过程中的某一行为
例如，MemberService.get的调用或者MemberService.delete抛出异常等行为
3）、通知( Advice)回调
“切面”对于某个“连接点”所产生的动作。其中，一个“切面”可以包含多个“Advice”。
4）、切入点( Pointcut )：
需要代理的具体方法。匹配连接点的断言。
5）、目标对象( Target Object )
被代理的对象。被一个或者多个切面所通知的对象。
6）、AOP代理( AOP Proxy )主要两种方式:
 JDK（默认）、CGLib
7）、前置通知( Before Advice )
在invoke Pointcut之前调用,织入的方法。在某连接点（JoinPoint）之前执行的通知。
8）、后置通知( After Advice ) 
Pointcut之后调用,织入的方法。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。
9）、返回后通知( After Return Advice )
返回值为非Void,织入的方法。在某连接点正常完成后执行的通知，不包括抛出异常的情况。
10）、环绕通知( Around Advice )
只要触发调用,织入的方法。包围一个连接点的通知。
11）、异常通知( After Throwing Advice ) 
Pointcut抛出异常，织入的方法。在方法抛出异常退出时执行的通知

AOP的实现流程：
一，寻找入口
1、Spring的AOP是通过接入BeanPostProcessor后置处理器开始的。
2、AbstractAutowireCapableBeanFactory.initializeBean()方法为容器产生的Bean实例对象添加BeanPostProcessor后置处理器
二，选择代理策略
DefaultAopProxyFactory.createAopProxy()通过判断是否实现接口，来选择JDK或CGLib代理
三、调用代理方法
JdkDynamicAopProxy实现了InvocationHandler接口，通过invoke()执行代理方法。
主要实现思路可以简述为：
首先通过Advised.getInterceptorsAndDynamicInterceptionAdvice()获取应用到此方法上的通知链（InterceptorChain）。
---实际获取通知的实现逻辑其实是由AdvisorChainFactory的getInterceptorsAndDynamicInterceptionAdvice()方法来完成的，且获取到的结果会被缓存
---如果得到的拦截器链为空，则直接反射调用目标方法，否则创建MethodInvocation，调用其proceed()方法，触发拦截器链的执行
四、触发通知
1、DefaultAdvisorChainFactory工厂类负责生成拦截器链。
2、GlobalAdvisorAdapterRegistry负责拦截器的适配和注册过程
--GlobalAdvisorAdapterRegistry起到了适配器和单例模式的作用，提供了一个DefaultAdvisorAdapterRegistry，它用来完成各种通知的适配和注册过程。
3、通过ReflectiveMethodInvocation.process()按执行拦截器链中的每个拦截器

AOP的设计模式
1、AOP的核心，代理模式。
2、工厂模式：AbstractAutowireCapableBeanFactory、DefaultAopProxyFactory、DefaultAdvisorChainFactory
3、单例模式：GlobalAdvisorAdapterRegistry提供了唯一的DefaultAdvisorAdapterRegistry
4、适配器模式：DefaultAdvisorAdapterRegistry完成各种通知的适配与注册
5、责任链模式：DefaultAdvisorChainFactory生成的拦截器链